#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/MotionBlurCommon.hlsl"

#pragma kernel VelPreppingCS VELOCITY_PREPPING

#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch


#define SKIP_PREPPING_IF_NOT_NEEDED defined(SUPPORTS_WAVE_INTRINSICS) && 1

[numthreads(8, 8,1)]
void VelPreppingCS(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    float3 velAndDepth = 0.0f;
    float2 velocity;
    DecodeVelocity(LOAD_TEXTURE2D(_CameraMotionVectorsTexture, dispatchThreadId.xy), velocity);
    float depth = SampleCameraDepth(dispatchThreadId.xy);

#if SKIP_PREPPING_IF_NOT_NEEDED
    if (WaveActiveAnyTrue(any(velocity != 0.0f)))
    {
#endif
        PositionInputs posInput = GetPositionInput_Stereo(dispatchThreadId.xy, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V, unity_StereoEyeIndex);

        float2 finalVelocity = ComputeVelocity(posInput, velocity);
        velAndDepth.xy = EncodeVelocity(finalVelocity);
        velAndDepth.z = posInput.linearDepth;
#if SKIP_PREPPING_IF_NOT_NEEDED
    }
    else
    {
        velAndDepth.z = LinearEyeDepth(depth, _ZBufferParams);
    }
#endif

    // Compute linear depth
    _VelocityAndDepth[dispatchThreadId.xy] = velAndDepth;
}
